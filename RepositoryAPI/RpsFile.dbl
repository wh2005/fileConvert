;;*****************************************************************************
;;
;; Title:       RpsFile.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single Repository file definition
;;
;; Date:        2nd March 2024
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2024, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import SynPSG.RepositoryAPI
import Newtonsoft.Json
import Newtonsoft.Json.Converters
import System.Collections.Generic

namespace SynPSG.RepositoryAPI

    public class RpsFile

        public override method ToString, String
            endparams
        proc
            mreturn String.Format("RpsFile: {0}",this.Name)
        endmethod

        ;;File attribute data
        private mfl_info        ,fl_info

        private mStructureNames  ,@List<string>
        private mOdbcTableNames  ,@List<string>

        private mStructures      ,@RpsStructureCollection

        private mKeys            ,@RpsKeyCollection
        private mRelations       ,@RpsRelationCollection
        private mFormats         ,@RpsFormatCollection
        private mTags            ,@RpsTagCollection

        ;; Constructor
        public method RpsFile
            endparams
        proc
            ;mStructures = new RpsStructureCollection()
            ;mKeys       = new RpsKeyCollection()
            ;mRelations  = new RpsRelationCollection()
            ;mFormats    = new RpsFormatCollection()
            ;mTags       = new RpsTagCollection()
        endmethod

        method ~RpsFile
        proc
            ;clear mStructures, mKeys, mRelations, mFormats, mTags
        endmethod

        ;;---------------------------------------------------------------------
        ;;Public properties to expose the files attributes to the outside world

        ;;; <summary>
        ;;; Repository file name
        ;;; </summary>
        public readwrite property Name, String, String.Empty

        ;;; <summary>
        ;;; Desctiption
        ;;; </summary>
        public readwrite property Description, String, String.Empty

        ;;; <summary>
        ;;; Long description
        ;;; </summary>
        public readwrite property LongDescription, String, String.Empty

        ;;; <summary>
        ;;; User text string
        ;;; </summary>
        public readwrite property UserText, String, String.Empty

        ;;; <summary>
        ;;; Portable integer specifications
        ;;; </summary>
        public readwrite property PortableIntsSpecs, String, String.Empty

        ;;; <summary>
        ;;; Timestamp of last modification
        ;;; </summary>
        public property LastModified, String
            method get
            proc
                mreturn %atrim(mfl_info.fli_tstamp)
            endmethod
        endproperty

        ;;; <summary>
        ;;; File type (a15, e.g., "DBL ISAM", "ASCII")
        ;;; </summary>
        public property FileType, String
            method get
            proc
                mreturn %atrim(mfl_info.fli_filtyp)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Actual filename
        ;;; </summary>
        public property FileSpec, String
            method get
            proc
                mreturn %atrim(mfl_info.fli_fname)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Is file definition temporary?
        ;;; </summary>
        public property TempFile, boolean
            method get
            proc
                mreturn mfl_info.fli_temp
            endmethod
        endproperty

        ;;; <summary>
        ;;; Number of structures assigned to the file
        ;;; </summary>
        public property StructureCount, int
            method get
            proc
                mreturn mfl_info.fli_nmstructs
            endmethod
        endproperty

        ;;; <summary>
        ;;; First (or only) assigned structure
        ;;; </summary>
        public property FirstStructure, String
            method get
            proc
                mreturn %atrim(mfl_info.fli_struct)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Record type
        ;;; </summary>
        public property RecordType, RpsRecordType
            method get
            proc
                mreturn (RpsRecordType)integer(mfl_info.fli_rectyp)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Page (index block) size
        ;;; </summary>
        public property PageSize, RpsFilePageSize
            method get
            proc
                mreturn (RpsFilePageSize)integer(mfl_info.fli_pagesize)
            endmethod
        endproperty

        ;;; <summary>
        ;;; File density
        ;;; </summary>
        public property Density, int
            method get
            proc
                mreturn mfl_info.fli_density
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; File addressing
        ;;; </summary>
        public property Addressing, RpsFileAddressing
            method get
            proc
                mreturn (RpsFileAddressing)integer(mfl_info.fli_addressing)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Compress record data?
        ;;; </summary>
        public property RecordCompression, boolean
            method get
            proc
                mreturn mfl_info.fli_compress
            endmethod
        endproperty

        ;;; <summary>
        ;;; Static RFA's?
        ;;; </summary>
        public property StaticRFA, boolean
            method get
            proc
                mreturn mfl_info.fli_staticrfa
            endmethod
        endproperty

        ;;; <summary>
        ;;; Change tracking?
        ;;; </summary>
        public property ChangeTracking, boolean
            method get
            proc
                mreturn mfl_info.fli_track
            endmethod
        endproperty

        ;;; <summary>
        ;;; Stored GRFAs?
        ;;; </summary>
        public property StoredGRFA, boolean
            method get
            proc
                mreturn mfl_info.fli_sgrfa
            endmethod
        endproperty

        {JsonIgnore}
        ;;; <summary>
        ;;; Keys collection - if there is a structure assigned
        ;;; </summary>
        public property Keys, @RpsKeyCollection
            method get
            proc
                if ((mKeys==^null) && (mfl_info.fli_struct))
                    mkeys = new RpsKeyCollection()
                mreturn mKeys
            endmethod
        endproperty

        {JsonIgnore}
        ;;; <summary>
        ;;; Collection of structures assigned to the file
        ;;; </summary>
        public property Structures, @RpsStructureCollection
            method get
            proc
                if (mStructures==^null)
                    mStructures = new RpsStructureCollection()
                mreturn mStructures
            endmethod
            method set
            proc
                mStructures = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Collection of assigned structure NAMES and ODBC TABLE NAMES 
        ;;; </summary>
        public property StructureNames, @List<string>
            method get
            proc
                mreturn mStructureNames
            endmethod
            method set
            proc
                mStructureNames = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Collection of assigned structure NAMES and ODBC TABLE NAMES 
        ;;; </summary>
        public property OdbcTableNames, @List<string>
            method get
            proc
                mreturn mOdbcTableNames
            endmethod
            method set
            proc
                mOdbcTableNames = value
            endmethod
        endproperty

        public property Info, fl_info
            method set
            proc
                mfl_info = value
            endmethod
        endproperty

    endclass

endnamespace

