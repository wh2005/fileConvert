;;*****************************************************************************
;;
;; Title:       RpsKeySegment.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single key segment for a Repository structures key
;;
;; Date:        2nd March 2024
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2024, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Newtonsoft.Json
import Newtonsoft.Json.Converters

namespace SynPSG.RepositoryAPI

    ;;; <summary>
    ;;; Represents a repository key segment
    ;;; </summary>
    class RpsKeySegment

        ;;Key segment attribute data
        protected mSegmentType  ,RpsKeySegmentType  ;;Segment type (see .defines above)
        protected mPosition     ,int                ;;Segment field position
        protected mLength       ,int                ;;Segment field/literal length
        protected mField        ,String             ;;Segment field name
        protected mStructure    ,String             ;;Segment structure name
        protected mLiteralValue ,String             ;;Segment literal value (length in ki_seglen)
        protected mDataType     ,int                ;;Optional, segment data type
        protected mOrder        ,RpsKeySegmentOrder ;;Optional, segment order

        ;;; <summary>
        ;;; Load a key segment
        ;;; </summary>
        ;;; <param name="a_SegmentType">Segment type</param>
        ;;; <param name="a_Position">Position of segment in record</param>
        ;;; <param name="a_Length">Length of segment</param>
        ;;; <param name="a_Field">Name of field (external segments)</param>
        ;;; <param name="a_Structure">Name of structure (external segments)</param>
        ;;; <param name="a_LiteralValue">Literal value</param>
        ;;; <param name="a_DataType">Data type</param>
        ;;; <param name="a_Order">Ordering sequence</param>
        public static method LoadKeySegment ,@RpsKeySegment
            required in a_SegmentType   ,a
            required in a_Position      ,d
            required in a_Length        ,d
            required in a_Field         ,a
            required in a_Structure     ,a
            required in a_LiteralValue  ,a
            required in a_DataType      ,d
            required in a_Order         ,d
            endparams
            record
                myKeySegment ,@RpsKeySegment
            endrecord
        proc
            myKeySegment = new RpsKeySegment()

            myKeySegment.mDataType = a_DataType
            
;            ;;Segment data types are optional in Repository, but default to
;            ;;alpha in ISAM.  If we don't have a segment data type, default to
;            ;;alpha
;            if (!mDataType)
;                mDataType = 1

            using a_SegmentType select
            ("F"),  myKeySegment.mSegmentType = RpsKeySegmentType.Field
            ("L"),  myKeySegment.mSegmentType = RpsKeySegmentType.Literal
            ("E"),  myKeySegment.mSegmentType = RpsKeySegmentType.External
            ("R"),  myKeySegment.mSegmentType = RpsKeySegmentType.RecordNumber
            endusing

            data tmpLiteral, string, %atrim(a_LiteralValue)

            if (myKeySegment.mSegmentType == RpsKeySegmentType.Literal && myKeySegment.mDataType==1) then
            begin
                myKeySegment.mLiteralValue = tmpLiteral.Replace("~"," ")
                myKeySegment.mLength       = tmpLiteral.Length
            end
            else
            begin
                myKeySegment.mLiteralValue = tmpLiteral
                myKeySegment.mLength       = a_Length
            end

            myKeySegment.mPosition       = a_Position
            myKeySegment.mField          = %atrim(a_Field)
            myKeySegment.mStructure      = %atrim(a_Structure)
            myKeySegment.mOrder          = (RpsKeySegmentOrder)%integer(a_Order)
            
            mreturn myKeySegment
        endmethod

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Segment type
        ;;; </summary>
        public property SegmentType, RpsKeySegmentType
            method get
            proc
                mreturn mSegmentType
            endmethod
        endproperty

        ;;; <summary>
        ;;; Segment field position
        ;;; </summary>
        public property Position, int
            method get
            proc
                mreturn mPosition
            endmethod
        endproperty

        ;;; <summary>
        ;;; Segment field or literav value length
        ;;; </summary>
        public property Length, int
            method get
            proc
                mreturn mLength
            endmethod
        endproperty

        ;;; <summary>
        ;;; Segment field name (external segments only)
        ;;; </summary>
        public property Field, String
            method get
            proc
                mreturn mField
            endmethod
        endproperty

        ;;; <summary>
        ;;; Segment structure name (external segments only)
        ;;; </summary>
        public property Structure, String
            method get
            proc
                mreturn mStructure
            endmethod
        endproperty

        ;;; <summary>
        ;;; Literal value (literal segments only)
        ;;; </summary>
        public property LiteralValue, String
            method get
            proc
                mreturn mLiteralValue
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Data type (optional)
        ;;; </summary>
        public property DataType, RpsKeySegmentDataType
            method get
            proc
                mreturn (RpsKeySegmentDataType)integer(mDataType)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Data type name
        ;;; </summary>
        public property DataTypeName, string
            method get
            proc
                using %integer(mDataType) select
                (RpsKeySegmentDataType.Unspecified),
                    mreturn "UNSPECIFIED"
                (RpsKeySegmentDataType.Alpha),
                    mreturn "ALPHA"
                (RpsKeySegmentDataType.NoCaseAlpha),
                    mreturn "NOCASE"
                (RpsKeySegmentDataType.Decimal),
                    mreturn "DECIMAL"
                (RpsKeySegmentDataType.SignedInteger),
                    mreturn "INTEGER"
                (RpsKeySegmentDataType.UnsignedInteger),
                    mreturn "UNSIGNED"
                (RpsKeySegmentDataType.AutoSequence),
                    mreturn "SEQUENCE"
                (RpsKeySegmentDataType.AutoTimestampCreated),
                    mreturn "CTIMESTAMP"
                (RpsKeySegmentDataType.AutoTimestampUpdated),
                    mreturn "TIMESTAMP"
                endusing
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Ordering sequence
        ;;; </summary>
        public property Order, RpsKeySegmentOrder
            method get
            proc
                mreturn mOrder
            endmethod
        endproperty

    endclass

endnamespace

