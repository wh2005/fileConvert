;;*****************************************************************************
;;
;; Title:       RpsEnumMember.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single Repository enumeration member
;;
;; Date:        2nd March 2024
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2024, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import SynPSG.RepositoryAPI

namespace SynPSG.RepositoryAPI

    ;;; <summary>
    ;;; Represents a member of a repository ENUM
    ;;; </summary>
    public class RpsEnumMember

        public override method ToString, String
            endparams
        proc
            mreturn String.Format("RpsEnumMember: {0}",mName)
        endmethod

        ;;Field attribute data
        protected mEnumName             ,String
        protected mName                 ,String
        protected mExplicitValue        ,String
        protected mImplicitValue        ,String

        ;;; <summary>
        ;;; Create an enumeration member instance.
        ;;; </summary>
        ;;; <param name="EnumName">Name of parent ENUM</param>
        ;;; <param name="Name">Name of member to create</param>
        ;;; <param name="ExplicitValue">Explicitly assigned value</param>
        ;;; <param name="ImplicitValue">Implicitly derived value</param>
        public method RpsEnumMember
            required in EnumName, String
            required in Name, String
            required in ExplicitValue, String
            required in ImplicitValue, String
            endparams
        proc
            if (EnumName==^null) then
                mEnumName = ""
            else
                mEnumName = EnumName.Trim()

            if (Name==^null) then
                mName = ""
            else
                mName = Name.Trim()

            if (ExplicitValue==^null) then
                mExplicitValue = ""
            else
                mExplicitValue = ExplicitValue.Trim()

            if (ImplicitValue==^null) then
                mImplicitValue = ""
            else
                mImplicitValue = ImplicitValue.Trim()

        endmethod

        ;;---------------------------------------------------------------------
        ;;Public properties to expose enumeration member attributes

        ;;; <summary>
        ;;; Enumeration name
        ;;; </summary>
        public property EnumName, String
            method get
            proc
                mreturn mEnumName
            endmethod
        endproperty

        ;;; <summary>
        ;;; Member name
        ;;; </summary>
        public property Name, String
            method get
            proc
                mreturn mName
            endmethod
        endproperty

        ;;; <summary>
        ;;; Member explicit value (may be blank)
        ;;; </summary>
        public property ExplicitValue, String
            method get
            proc
                mreturn mExplicitValue
            endmethod
        endproperty

        ;;; <summary>
        ;;; Member implicit value (will not be blank)
        ;;; </summary>
        public property ImplicitValue, String
            method get
            proc
                mreturn mImplicitValue
            endmethod
        endproperty

    endclass

endnamespace
